# libintConfig.cmake
# ------------------
#
# Libint cmake module.
# This module sets the following variables:
#
# ::
#
#   libint_FOUND - true if libint and all required components found on the system
#   libint_VERSION - libint version in format Major.Minor.Release
#   libint_INCLUDE_DIRS - Directories where libint and libderiv headers are located.
#   libint_INCLUDE_DIR - same as DIRS
#XXX_DEFINITIONS: Definitions necessary to use XXX.h
#   libint_LIBRARIES - libint and libderiv libraries to link against.
#   libint_LIBRARY - same as LIBRARIES
#   libint_MAX_AM_ERI - maximum angular momentum level of libint libraries
#
#
# Available components are: shared static MAX_AM_ERI
#
# ::
#
#   shared - search for only shared library
#   static - search for only static library
#   [3, 10] - search for library with angular momentum >= this integer
#
#
# Suggested usage:
#
# ::
#
#   find_package(libint)
#   find_package(libint 1.1.6 EXACT CONFIG REQUIRED COMPONENTS shared 6)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   libint_DIR - cmake variable, set to directory containing this config file
#   CMAKE_PREFIX_PATH - cmake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package

@PACKAGE_INIT@

set(PACKAGE_NAME libint)
set (_valid_components
    static
    shared
    3
    4
    5
    6
    7
    8
    9
    10
)

# find includes
find_path(${PACKAGE_NAME}_INCLUDE_DIR
          NAMES libint/libint.h
          PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
          NO_DEFAULT_PATH)
set(${PACKAGE_NAME}_INCLUDE_DIRS ${${PACKAGE_NAME}_INCLUDE_DIR})

# find library: shared, static, or whichever
set(_hold_library_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
list(FIND ${PACKAGE_NAME}_FIND_COMPONENTS "shared" _seek_shared)
list(FIND ${PACKAGE_NAME}_FIND_COMPONENTS "static" _seek_static)
if(_seek_shared GREATER -1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_SHARED_LIBRARY_SUFFIX})
elseif(_seek_static GREATER -1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()
find_library(_temp_int
             NAMES int
             PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@
             NO_DEFAULT_PATH)
find_library(_temp_deriv
             NAMES deriv
             PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@
             NO_DEFAULT_PATH)
if(_temp_int AND _temp_deriv)
    set(${PACKAGE_NAME}_LIBRARY "${_temp_int} ${_temp_deriv}")
    if(_seek_shared GREATER -1)
        set(${PACKAGE_NAME}_shared_FOUND 1)
    elseif(_seek_static GREATER -1)
        set(${PACKAGE_NAME}_static_FOUND 1)
    endif()
else()
    if(_seek_shared GREATER -1)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "libintConfig missing component: shared libraries (int: ${_temp_int}, deriv: ${_temp_deriv})")
        endif()
    elseif(_seek_static GREATER -1)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "libintConfig missing component: static libraries (int: ${_temp_int}, deriv: ${_temp_deriv})")
        endif()
    else()
        set(${PACKAGE_NAME}_FOUND 0)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "libintConfig missing component: libraries (int: ${_temp_int}, deriv: ${_temp_deriv})")
        endif()
    endif()
endif()
set(CMAKE_FIND_LIBRARY_SUFFIXES ${_hold_library_suffixes})
set(${PACKAGE_NAME}_LIBRARIES ${${PACKAGE_NAME}_LIBRARY})

# check AM component
#   * Psi4 uses MAX_AM_ERI (formerly LIBINT_OPT_AM) for AM control
#   * libint.h uses LIBINT_MAX_AM = MAX_AM_ERI + 1
#   * libint.h uses LIBINT_OPT_AM = ceiling(LIBINT_MAX_AM / 2)
file(READ ${${PACKAGE_NAME}_INCLUDE_DIR}/libint/libint.h _contents)
string(REGEX MATCH "define LIBINT_MAX_AM (.|..)" DA_LINE ${_contents})
math(EXPR ${PACKAGE_NAME}_MAX_AM_ERI ${CMAKE_MATCH_1}-1)
foreach(_comp IN LISTS ${PACKAGE_NAME}_FIND_COMPONENTS)
    list(FIND _valid_components ${_comp} _seek_am)
    if(_seek_am GREATER 1)  # component is AM, not shared or static
        # detected >= requested
        if(NOT ${${PACKAGE_NAME}_MAX_AM_ERI} LESS ${_comp})
            set(${PACKAGE_NAME}_${_comp}_FOUND 1)
        else()
            if(NOT CMAKE_REQUIRED_QUIET)
                message(STATUS "libintConfig missing component: requested AM ${_comp} > ${${PACKAGE_NAME}_MAX_AM_ERI} detected in ${${PACKAGE_NAME}_LIBRARY}")
            endif()
        endif()
    endif()
endforeach()

check_required_components(${PACKAGE_NAME})

# don't include targets if this file is being picked up by another
#   project which has already built this as a subproject
if(NOT TARGET ${PACKAGE_NAME})
    add_library(int INTERFACE)
    target_include_directories(int INTERFACE ${${PACKAGE_NAME}_INCLUDE_DIRS})
    target_link_libraries(int INTERFACE ${${PACKAGE_NAME}_LIBRARIES})
endif()

